service: sekwah-maven
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

# https://www.serverless.com/plugins/
plugins:
  - serverless-lambda-edge-pre-existing-cloudfront
  - serverless-prune-plugin
  - serverless-s3-sync

custom:
  s3Sync:
    - bucketName: sekwah-maven
      bucketPrefix: maven-explorer
      localDir: ../maven-explorer/build
  lambdaEdgePreExistingCloudFront:
    validStages:
      - staging
      - production
      - dev
  prune:
    automatic: true
    number: 3

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  # Need to look at new format, works for now in 2.x.x
  iam:
    role: LambdaEdgeMavenRole

  # you can overwrite defaults here
  #  stage: dev
  #  region: eu-west-1
  # Needs to be here for lambda edge functions
  region: us-east-1

package:
  individually: true
  excludeDevDependencies: true
  patterns:
    - "!**/*"

functions:
#  mavenFolderList:
#    handler: lambda/folderList.list
#    events:
#      - http: GET /files
#    package:
#      patterns:
#        - "lambda/folderList.js"
  mavenFolderRedirect:
    handler: lambda/folderRedirect.folderredirect
    # Doesnt need to be but this is a light function anyway
    memorySize: 128
    package:
      patterns:
        - "lambda/folderRedirect.js"
        #- "lambda/folderList.js"
        #- node_modules/**
    events:
      # Using npm install --save-dev serverless-lambda-edge-pre-existing-cloudfront
      - preExistingCloudFront:
          distributionId: ${env:CLOUDFRONT_DISTRIBUTION_ID} # CloudFront distribution ID you want to associate
          eventType: origin-request # Choose event to trigger your Lambda function, which are `viewer-request`, `origin-request`, `origin-response` or `viewer-response`
          pathPattern: '*' # Specifying the CloudFront behavior
          includeBody: false # Whether including body or not within request
          stage: dev
  mavenFileDisplay:
    handler: lambda/alterHeaders.fileheaders
    memorySize: 128
    timeout: 5
    package:
      patterns:
        - "lambda/alterHeaders.js"
    events:
      - preExistingCloudFront:
          distributionId: ${env:CLOUDFRONT_DISTRIBUTION_ID} # CloudFront distribution ID you want to associate
          eventType: viewer-response # Choose event to trigger your Lambda function, which are `viewer-request`, `origin-request`, `origin-response` or `viewer-response`
          pathPattern: '*' # Specifying the CloudFront behavior
          includeBody: false # Whether including body or not within request
          stage: dev

resources:
  Resources:
    LambdaEdgeMavenRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: LambdaEdgeMavenRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - edgelambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
        # Doesnt seem to currently properly apply but yea :P
        Policies:
          - PolicyName: mavenListAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: "Allow"
                  Action:
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::sekwah-maven"
